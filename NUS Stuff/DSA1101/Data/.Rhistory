radiant:::radiant()
radiant:::radiant()
View(r_data)
radiant:::radiant()
a = 10
a
price = 1 200 000
price = 1200000
price
rm a
a *= 2
a += 2
a
print(numOfMonths(7000, 10000, 1200000))
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
numOfMonths <- function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
print(numOfMonths(7000, 10000, 1200000))
print(numOfMonths(7000, 10000, 1200000))
numOfMonths <- function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
print(numOfMonths(7000, 10000, 1200000))
print(numOfMonths(7000, 10000, 1200000))
numOfMonths
numOfMonths = function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
numOfMonths = function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
print(numOfMonths(7000, 10000, 1200000))
numOfMonths = function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
numOfMonths = function(salary, start, price) {
downPay = 0.25 * price
cumDownpay = 0
endOfMonth = start
numMonths = 0
while (cumDownpay < downPay) {
cumDownpay = cumDownpay + 0.4 * salary
endOfMonth = endOfMonth * 1.02
totalSaved = cumDownpay + endOfMonth
numMonths = numMonths + 1
}
return numMonths
}
print(numOfMonths(7000, 10000, 1200000))
print(numOfMonths(7000, 10000, 1200000))
# Response Variable: FEV
hist(total, freq=TRUE, main = paste("Histogram of Total Sales"),
xlab = "total", ylab="Frequency", axes = TRUE, col = "blue")
print(fibos)
fibos <- append(fibos, fib(i))
library(r2r)
table <- hashmap()
fib <- function(n) {
str_n <- toString(n)
helper <- function(n) {
if (n < 2) {
return(n)
} else if (n %in% names(table)) {
return(table[[str_n]])
} else {
table[[str_n]] <- (fib(n - 1) + fib(n - 2))
return(table[[str_n]])
}
}
return(helper(n))
}
fibos <- c()
for (i in 1:20) {
fibos <- append(fibos, fib(i))
}
print(fibos)
for (i in 1:10) {
fibos <- append(fibos, fib(i))
}
print(fibos)
helper <- function(n) {
if (n < 2) {
return(n)
} else if (n %in% names(table)) {
return(table[[str_n]])
} else {
table[[str_n]] <- (fib(n - 1) + fib(n - 2))
return(table[[str_n]])
}
}
for (i in 1:10) {
fibos <- append(fibos, fib(i))
}
for (i in 1:10) {
fibos <- append(fibos, fib(i))
}
for (i in 1:10) {
fibos <- append(fibos, fib(i))
}
print(fibos)
helper <- function(n) {
if (n < 2) {
return(n)
} else if (n %in% names(table)) {
return(table[[str_n]])
} else {
table[[str_n]] <- (fib(n - 1) + fib(n - 2))
return(table[[str_n]])
}
}
return(helper(n))
fib <- function(n) {
str_n <- toString(n)
helper <- function(n) {
if (n < 2) {
return(n)
} else if (n %in% names(table)) {
return(table[[str_n]])
} else {
table[[str_n]] <- (fib(n - 1) + fib(n - 2))
return(table[[str_n]])
}
}
return(helper(n))
}
table <- hashmap()
m <- hashmap()
print(fib(9))
for (i in 0:n) {
a = b
b = a + b
}
Hashmap
m <- HashMap()
Hist
Hist()
install.packages("languageserver")
setwd("~/GitHub/Devcontainers-Rstudio/NUS Stuff/DSA1101")
setwd("~/GitHub/Devcontainers-Rstudio/NUS Stuff/DSA1101/Data")
