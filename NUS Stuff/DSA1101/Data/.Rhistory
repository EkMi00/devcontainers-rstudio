install.packages("installr")
install.packages("Rtools")
library(installr)
updateR()
R.version
q()
rtools
help(rtools)
source("~/GitHub/Devcontainers-Rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 1/Tut1-Rcode.R", echo=TRUE)
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
help(data.fram)
help(data.frame)
# [4] {liver loaf, yogurt}          => {whole milk}       0.001016777 0.6666667
# [5] {tropical fruit, curd cheese} => {other vegetables} 0.001016777 0.6666667
# [6] {curd cheese, rolls/buns}     => {whole milk}       0.001016777 0.6250000
#     coverage    lift     count
# [1] 0.001525165 2.870009 11
# [2] 0.005693950 2.515917 36
# [3] 0.007625826 2.400371 46
# [4] 0.001525165 2.609099 10
# [5] 0.001525165 3.445437 10
# [6] 0.001626843 2.446031 10
plot(rules, measure= c("support", "confidence"),
shading="lift", col="black") # scatter plot of all 2918 rules
# [4] {liver loaf, yogurt}          => {whole milk}       0.001016777 0.6666667
# [5] {tropical fruit, curd cheese} => {other vegetables} 0.001016777 0.6666667
# [6] {curd cheese, rolls/buns}     => {whole milk}       0.001016777 0.6250000
#     coverage    lift     count
# [1] 0.001525165 2.870009 11
# [2] 0.005693950 2.515917 36
# [3] 0.007625826 2.400371 46
# [4] 0.001525165 2.609099 10
# [5] 0.001525165 3.445437 10
# [6] 0.001626843 2.446031 10
plot(rules, measure= c("support", "confidence"),
shading="lift", col="red") # scatter plot of all 2918 rules
# [4] {liver loaf, yogurt}          => {whole milk}       0.001016777 0.6666667
# [5] {tropical fruit, curd cheese} => {other vegetables} 0.001016777 0.6666667
# [6] {curd cheese, rolls/buns}     => {whole milk}       0.001016777 0.6250000
#     coverage    lift     count
# [1] 0.001525165 2.870009 11
# [2] 0.005693950 2.515917 36
# [3] 0.007625826 2.400371 46
# [4] 0.001525165 2.609099 10
# [5] 0.001525165 3.445437 10
# [6] 0.001626843 2.446031 10
plot(rules)
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
plot(rules, measure= c("support", "confidence"),
shading="lift") # scatter plot of all 2918 rules
# the top 3 rules sorted by LIFT:
inspect(head(sort(rules, by="lift"), 3))
# the top 5 rules sorted by LIFT
inspect(head(sort(rules, by="lift"), 5))
highLiftRules <- head(sort(rules, by="lift"), 5)
# plot the top 5 rules above for visualzation:
plot(highLiftRules, method="graph") # this is simple and a bit difficult to see
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 11/Tut11Practise.R", echo=TRUE)
edgeCol = "blue", alpha = 1)
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = 1)
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(0,1))
better:
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(0,1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(0,1))
plot(highLiftRules, method = "graph", engine = "igraph",
edgeCol = "blue", alpha = c(0,1))
plot(highLiftRules, method = "matrix", engine = "igraph",
edgeCol = "blue", alpha = c(1))
plot(highLiftRules, method = "mosaic", engine = "igraph",
edgeCol = "blue", alpha = c(1))
# plot the top 5 rules above for visualzation:
plot(highLiftRules, method="matrix") # this is simple and a bit difficult to see
# plot the top 5 rules above for visualzation:
plot(highLiftRules, method="mosaic") # this is simple and a bit difficult to see
source("~/GitHub/devcontainers-rstudio/NUS Stuff/DSA1101/Tutorial/Tutorial 2/Tut2Practise.R", echo=TRUE)
out
FEV
outliers_index
which(FEV == c(out))
which(FEV == out)
which(FEV == 4.87)
